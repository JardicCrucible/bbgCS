using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using DataImporter.Feeds.Bloomberg.Models; // Assuming models are in this namespace
using ExcelDataReader;
using Newtonsoft.Json;

namespace DataImporter.Loaders
{
    /// <summary>
    /// Loader to handle the multi-step, asynchronous data retrieval process
    /// from the Bloomberg LQA (Liquidity Assessment) API.
    /// </summary>
    public class BloombergLqaLoader : LoaderBase
    {
        private readonly BloombergLqaLoaderConfiguration _config;
        private HttpClient _httpClient;
        private string _accessToken;
        private const int ReplyTimeoutMinutes = 5;
        private const int PollingIntervalSeconds = 30;

        public BloombergLqaLoader(LoaderConfiguration config)
        {
            // Validate that the correct configuration type has been passed.
            if (!(config is BloombergLqaLoaderConfiguration))
            {
                throw new ArgumentException($"Configuration for BloombergLqaLoader must be of type {nameof(BloombergLqaLoaderConfiguration)}");
            }
            _config = config as BloombergLqaLoaderConfiguration;
        }

        /// <summary>
        /// Main entry point for the loader, called by the importer framework.
        /// It orchestrates the entire API communication flow.
        /// </summary>
        /// <param name="processDelegate">A delegate to process the final DataTable.</param>
        /// <returns>An IDataReader containing the fetched data.</returns>
        public override async Task<IDataReader> Fetch(ProcessDelegate<DataTable> processDelegate)
        {
            SetupHttpClient();

            // 1. Authenticate to get the access token
            await Authenticate();

            string idPostfix = $"{DateTime.UtcNow:yyyyMMdd}_{Guid.NewGuid().ToString().Substring(0, 6)}";

            // 2. Create the Universe component from the ISINs file
            string universeUrl = await CreateUniverse(_config.ExtractSource, idPostfix);
            UtilityFunctions.LogMsg($"Successfully created Universe: {universeUrl}");

            // 3. Create the FieldList component from the fields file (or use default)
            string fieldListUrl = await CreateFieldList(_config.ExtractSourceSecondary, idPostfix);
            UtilityFunctions.LogMsg($"Successfully created FieldList: {fieldListUrl}");

            // 4. Create the main Request component
            string requestUrl = await CreateRequestComponent(universeUrl, fieldListUrl, idPostfix);
            UtilityFunctions.LogMsg($"Successfully created Request: {requestUrl}");

            // 5. Poll for the results to be ready
            var outputUrls = await PollForResults(requestUrl);
            UtilityFunctions.LogMsg($"Response is ready. Found {outputUrls.Count} output file(s).");

            // 6. Download the result files and merge into a single DataTable
            DataTable finalData = await DownloadResults(outputUrls);
            UtilityFunctions.LogMsg($"Successfully downloaded and merged data. Total rows: {finalData.Rows.Count}");

            // 7. Pass the final data to the processing delegate
            return processDelegate(finalData);
        }

        private void SetupHttpClient()
        {
            var handler = new HttpClientHandler();
            if (!string.IsNullOrEmpty(_config.Proxy))
            {
                handler.Proxy = new WebProxy(_config.Proxy);
                handler.UseProxy = true;
                UtilityFunctions.LogMsg($"Using proxy: {_config.Proxy}");
            }

            _httpClient = new HttpClient(handler)
            {
                Timeout = _config.Timeout
            };
        }

        private async Task Authenticate()
        {
            UtilityFunctions.LogMsg("Authenticating with Bloomberg API...");
            var request = new HttpRequestMessage(HttpMethod.Post, _config.BamTokenUrl);
            var authKey = Convert.ToBase64String(Encoding.UTF8.GetBytes($"{_config.ApiClientId}:{_config.ApiClientSecret}"));
            request.Headers.Authorization = new AuthenticationHeaderValue("Basic", authKey);
            
            request.Content = new FormUrlEncodedContent(new Dictionary<string, string>
            {
                { "grant_type", "client_credentials" }
            });

            var response = await _httpClient.SendAsync(request);
            if (!response.IsSuccessStatusCode)
            {
                 var error = await response.Content.ReadAsStringAsync();
                 throw new InvalidOperationException($"Bloomberg authentication failed with status {response.StatusCode}. Details: {error}");
            }

            var responseBody = await response.Content.ReadAsStringAsync();
            var tokenData = JsonConvert.DeserializeObject<Dictionary<string, string>>(responseBody);
            _accessToken = tokenData["access_token"];

            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _accessToken);
            UtilityFunctions.LogMsg("Authentication successful.");
        }

        private async Task<string> CreateUniverse(string filepath, string idPostfix)
        {
            // This logic is identical to my previous response, reading the Excel file.
            // ... (Implementation from previous response)
            var identifiers = new List<Identifier>();
            using (var stream = File.Open(filepath, FileMode.Open, FileAccess.Read))
            using (var reader = ExcelReaderFactory.CreateReader(stream))
            {
                reader.Read(); // Skip header
                while (reader.Read())
                {
                    if(reader.GetValue(0) == null) continue;
                    var identifier = new Identifier { IdentifierValue = reader.GetValue(0).ToString() };
                    if (reader.FieldCount > 1 && reader.GetValue(1) != null && !string.IsNullOrWhiteSpace(reader.GetValue(1).ToString()))
                    {
                        identifier.FieldOverrides = new List<FieldOverride>
                        {
                            new FieldOverride { Mnemonic = "LQA_TGT_LIQUIDATION_VOLUME", Override = reader.GetValue(1).ToString() }
                        };
                    }
                    identifiers.Add(identifier);
                }
            }

            var universePayload = new UniversePayload
            {
                Id = $"LQA_Universe_{idPostfix}",
                Description = $"LQA Universe {DateTime.UtcNow:MMMM yyyy}",
                Contains = identifiers
            };

            var payloadJson = JsonConvert.SerializeObject(universePayload);
            var content = new StringContent(payloadJson, Encoding.UTF8, "application/json");

            string universesUrl = $"{_config.ApiUrl}catalogs/{_config.Account}/universes/";
            var response = await _httpClient.PostAsync(universesUrl, content);
            response.EnsureSuccessStatusCode();
            return response.Headers.Location.ToString();
        }

        private async Task<string> CreateFieldList(string filepath, string idPostfix)
        {
            // This logic is identical to my previous response.
            // ... (Implementation from previous response)
            var mnemonics = new List<Mnemonic>();
             if (File.Exists(filepath))
            {
                using (var stream = File.Open(filepath, FileMode.Open, FileAccess.Read))
                using (var reader = ExcelReaderFactory.CreateReader(stream))
                {
                    while (reader.Read())
                    {
                        if(reader.GetValue(0) != null)
                            mnemonics.Add(new Mnemonic { Value = reader.GetValue(0).ToString() });
                    }
                }
            }
            else
            {
                mnemonics.AddRange(new[] { new Mnemonic { Value = "CRNCY" }, new Mnemonic { Value = "NAME" } });
            }

            var fieldListPayload = new FieldListPayload
            {
                Id = $"LQA_FieldList_{idPostfix}",
                Description = "LQA Standard Field List",
                Contains = mnemonics
            };

            var payloadJson = JsonConvert.SerializeObject(fieldListPayload);
            var content = new StringContent(payloadJson, Encoding.UTF8, "application/json");

            string fieldListsUrl = $"{_config.ApiUrl}catalogs/{_config.Account}/fieldlists/";
            var response = await _httpClient.PostAsync(fieldListsUrl, content);
            response.EnsureSuccessStatusCode();
            return response.Headers.Location.ToString();
        }

        private async Task<string> CreateRequestComponent(string universeUrl, string fieldListUrl, string idPostfix)
        {
            // This logic is identical to my previous response.
            // ... (Implementation from previous response)
             var requestPayload = new RequestPayload
            {
                Name = $"LQA_Request_{idPostfix}",
                Description = "LQA Request",
                Universe = universeUrl,
                FieldList = fieldListUrl
            };

            var payloadJson = JsonConvert.SerializeObject(requestPayload);
            var content = new StringContent(payloadJson, Encoding.UTF8, "application/json");
            
            string requestsUrl = $"{_config.ApiUrl}requests/";
            var response = await _httpClient.PostAsync(requestsUrl, content);
            response.EnsureSuccessStatusCode();
            return response.Headers.Location.ToString();
        }

        private async Task<List<string>> PollForResults(string requestUrl)
        {
            // This logic is identical to my previous response.
            // ... (Implementation from previous response)
            var responseJson = await _httpClient.GetStringAsync(requestUrl);
            var apiResponse = JsonConvert.DeserializeObject<ApiResponse>(responseJson);
            string requestId = apiResponse.Identifier;

            string responsesUrl = $"{_config.ApiUrl}catalogs/content/responses/";
            var queryParams = $"?prefix={requestId}&requestIdentifier={requestId}";

            var startTime = DateTime.UtcNow;
            while (DateTime.UtcNow - startTime < TimeSpan.FromMinutes(ReplyTimeoutMinutes))
            {
                var response = await _httpClient.GetAsync(responsesUrl + queryParams);
                if (response.IsSuccessStatusCode)
                {
                    var contentJson = await response.Content.ReadAsStringAsync();
                    if(!string.IsNullOrWhiteSpace(contentJson) && contentJson != "[]")
                    {
                        var contentResponses = JsonConvert.DeserializeObject<List<ContentResponse>>(contentJson);
                        if (contentResponses != null && contentResponses.Any())
                        {
                            string host = new Uri(_config.ApiUrl).Host;
                            return contentResponses.Select(cr => $"https://{host}/eap/catalogs/content/responses/{cr.Key}").ToList();
                        }
                    }
                }
                
                UtilityFunctions.LogMsg($"Content not ready. Waiting {PollingIntervalSeconds} seconds...");
                await Task.Delay(TimeSpan.FromSeconds(PollingIntervalSeconds));
            }

            throw new TimeoutException($"Response not received within {ReplyTimeoutMinutes} minutes.");
        }

        private async Task<DataTable> DownloadResults(List<string> outputUrls)
        {
            // This logic is identical to my previous response.
            // ... (Implementation from previous response)
            var finalDataSet = new DataSet();
            foreach (var url in outputUrls)
            {
                UtilityFunctions.LogMsg($"Downloading result file: {url}");
                var responseJson = await _httpClient.GetStringAsync(url);
                var dataTable = JsonConvert.DeserializeObject<DataTable>(responseJson);
                finalDataSet.Tables.Add(dataTable);
            }
            
            var finalTable = new DataTable();
            if (finalDataSet.Tables.Count > 0)
            {
                finalTable = finalDataSet.Tables[0].Clone(); 
                foreach (DataTable table in finalDataSet.Tables)
                {
                    foreach (DataRow row in table.Rows)
                    {
                        finalTable.ImportRow(row);
                    }
                }
            }
            return finalTable;
        }
    }
}
