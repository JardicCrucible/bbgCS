using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using DataImporter.Loaders;
using Newtonsoft.Json;

namespace DataImporter.Feeds.BloombergLQA
{
    /// <summary>
    /// Importer for fetching Liquidity Assessment (LQA) data from the Bloomberg API.
    /// This class orchestrates the multi-step process of creating a data request and retrieving the results.
    /// </summary>
    public class BloombergLqaImporter : ImporterBase
    {
        public override string Name => "BloombergLqa";

        /// <summary>
        /// Main entry point for the importer. It orchestrates the API calls to Bloomberg.
        /// </summary>
        /// <param name="valueDate">The reporting date for the import.</param>
        /// <param name="cto">Command line options, not used in this importer.</param>
        public override void ValidateAndImport(DateTime valueDate, CommandLineOptions cto)
        {
            ImporterBusinessDate = valueDate;
            ImporterSystemName = RunnerType.ExcelFile.ToString();
            BaseTableName = "LQA"; // Example table name
            ImportKeyCols = new Dictionary<string, Func<object>>
            {
                { "ReportingDate", () => ImporterBusinessDate }
            };

            // The ApiLoader will handle the actual HTTP requests
            var apiLoader = new BloombergLqaApiLoader(new ApiLoaderConfiguration
            {
                // Configuration should be loaded from a secure source
                // For demonstration, values are hardcoded.
                // These would come from your app settings or a vault.
                ApiTokenUrl = "https://bba-qa.bloomberg.com/oauth/token",
                ApiClientId = Environment.GetEnvironmentVariable("BLOOMBERG_CLIENT_ID"),
                ApiClientSecret = Environment.GetEnvironmentVariable("BLOOMBERG_CLIENT_SECRET"),
                BaseUrl = "https://api.bloomberg.com/eap/catalogs/",
                ProxyUrl = Environment.GetEnvironmentVariable("PROXY_URL") // e.g., http://primary-proxy.gsib.intranet.barcapint.com:8080
            });

            // The path to the spreadsheet with ISINs and overrides
            string universeFilepath = @"C:\path\to\your\isins.xlsx"; // This should be a configurable path
            string fieldsFilepath = @"C:\path\to\your\fields.xlsx"; // This should be a configurable path

            try
            {
                // Run the async processing logic and wait for it to complete.
                var dataTable = Task.Run(() => apiLoader.ProcessRequest(universeFilepath, fieldsFilepath)).Result;

                // Use the existing PostProcess method to handle the resulting data
                if (dataTable != null && dataTable.Rows.Count > 0)
                {
                    PostProcess(dataTable.CreateDataReader());
                }
                else
                {
                    // Log that no data was returned
                    UtilityFunctions.LogMsg("No data returned from Bloomberg LQA API.");
                }
            }
            catch (Exception ex)
            {
                UtilityFunctions.LogMsg($"An error occurred during the Bloomberg LQA import process: {ex.Message}", ex);
                throw;
            }
        }

        /// <summary>
        /// Post-processes the data returned from the API, converting it to a standard format.
        /// </summary>
        /// <param name="reader">The IDataReader containing the data from the API.</param>
        /// <returns>A DataTable with the processed data.</returns>
        protected override IDataReader PostProcess(IDataReader reader)
        {
            // This method can be customized to match the structure of ICECreditRisk's PostProcess
            DataTable originalData = new DataTable();
            originalData.Load(reader);

            if (originalData.Rows.Count == 0)
            {
                return originalData.CreateDataReader();
            }

            DataTable newDataTable = new DataTable(BaseTableName);

            // Add standard columns
            newDataTable.Columns.Add("ReportingDate", typeof(DateTime));
            newDataTable.Columns.Add("File_Name", typeof(string));

            // Add columns from the original data
            foreach (DataColumn col in originalData.Columns)
            {
                newDataTable.Columns.Add(col.ColumnName, col.DataType);
            }

            // Populate the new DataTable
            foreach (DataRow originalRow in originalData.Rows)
            {
                DataRow newRow = newDataTable.NewRow();
                newRow["ReportingDate"] = ImporterBusinessDate;
                newRow["File_Name"] = "BloombergLQA"; // Example file name

                foreach (DataColumn col in originalData.Columns)
                {
                    newRow[col.ColumnName] = originalRow[col];
                }
                newDataTable.Rows.Add(newRow);
            }

            return newDataTable.CreateDataReader();
        }
    }
}
