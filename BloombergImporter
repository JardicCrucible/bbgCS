using System;
using System.Collections.Generic;
using System.Data;
using DataImporter.Loaders;

namespace DataImporter.Feeds.Bloomberg
{
    /// <summary>
    /// Importer for fetching Liquidity Assessment (LQA) data from the Bloomberg API.
    /// This class is responsible for configuring the loader and processing the results.
    /// </summary>
    public class BloombergLqaImporter : ImporterBase
    {
        public override string Name => "BloombergLqa";

        /// <summary>
        /// Initializes the import process by setting configuration from parameters
        /// and creating the appropriate data loader.
        /// </summary>
        /// <param name="valueDate">The reporting date for the import.</param>
        /// <param name="cto">Command line options, which can contain file paths.</param>
        public override void InitializeImport(DateTime valueDate, CommandLineOptions cto)
        {
            // --- Basic Importer Setup ---
            ImporterBusinessDate = valueDate;
            ImporterSystemName = RunnerType.Api.ToString(); // This is an API-based import
            BaseTableName = "BloombergLQA"; // Target table name in the database
            ImportKeyCols = new Dictionary<string, Func<object>>
            {
                { "ReportingDate", () => ImporterBusinessDate }
            };

            // Set file paths from command line or config. `ExtractSource` is the standard property for the primary file.
            // Using ExtractSource for the ISINs (universe) and ExtractSourceSecondary for the fields.
            ExtractSource = @"C:\temp\example_isins.xlsx";       // REQUIRED: Path to ISINs file
            ExtractSourceSecondary = @"C:\temp\example_fields.xlsx"; // OPTIONAL: Path to fields file

            // --- Loader Configuration ---
            var config = new BloombergLqaLoaderConfiguration
            {
                // These values should come from a secure config source (e.g., App.config, Azure Key Vault)
                // Using Environment Variables as a best practice.
                ApiClientId = Environment.GetEnvironmentVariable("BLOOMBERG_CLIENT_ID"),
                ApiClientSecret = Environment.GetEnvironmentVariable("BLOOMBERG_CLIENT_SECRET"),
                Account = Environment.GetEnvironmentVariable("BLOOMBERG_DL_ACCOUNT_NUMBER"),
                BamTokenUrl = "https://bba-qa.bloomberg.com/oauth/token", // Using BamTokenUrl for the token endpoint
                ApiUrl = "https://api.bloomberg.com/eap/", // Base URL for API calls
                Proxy = Environment.GetEnvironmentVariable("PROXY_URL"),
                Timeout = new TimeSpan(0, 10, 0) // Set a longer timeout for the entire process
            };

            // Pass the configuration to the base class method, which will create the loader
            SetLoaderConfig(config);
        }

        /// <summary>
        /// Creates the specific loader for this import type.
        /// This method is called by the base class.
        /// </summary>
        /// <returns>A new instance of the BloombergLqaLoader.</returns>
        public override LoaderBase CreateLoader()
        {
            return new BloombergLqaLoader(LoaderConfig);
        }
        
        // The base class's Run() method will call CreateLoader(), then the loader's Fetch() method.
        // After Fetch() completes, we can use PostProcess to transform the data.
        // The default PostProcess from ImporterBase might be sufficient if no transformations are needed.
        // If custom logic is needed (like in ICECreditRisk), you can override it here.
    }
}
